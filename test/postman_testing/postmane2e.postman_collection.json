{
	"info": {
		"_postman_id": "ec5b66a7-4c70-47ca-aa5a-1d150a89c2a8",
		"name": "461 Phase2 CIC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40185812"
	},
	"item": [
		{
			"name": "get tracks success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Tracks success code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Tracks success return values\", function () {\r",
							"    const jsonData = pm.response.json(); \r",
							"    pm.expect(jsonData).to.have.property('plannedTracks');  \r",
							"    pm.expect(jsonData.plannedTracks).to.be.an('array');\r",
							"    pm.expect(jsonData.plannedTracks).to.include(\"Access control track\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/tracks",
					"host": [
						"{{url}}"
					],
					"path": [
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "create account success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create account success code\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Create account success return message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message', 'User created successfully'); \r",
							"});\r",
							"\r",
							"pm.test(\"Create account success return values\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('user'); \r",
							"\r",
							"    const user = jsonData.user;\r",
							"    pm.expect(user).to.be.an('object'); \r",
							"    pm.expect(user).to.have.property('username', 'testuser'); \r",
							"    pm.expect(user).to.have.property('isAdmin', true); \r",
							"    pm.expect(user).to.have.property('userHash').that.is.a('string'); \r",
							"    pm.expect(user).to.have.property('userGroup', 'hi'); \r",
							"    pm.expect(user).to.have.property('_id').that.is.a('string');\r",
							"    pm.expect(user).to.have.property('__v', 0); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"testuser\",\r\n    \"password\": \"testpass\",\r\n    \"isAdmin\": true,\r\n    \"userGroup\": \"hi\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/create-account",
					"host": [
						"{{url}}"
					],
					"path": [
						"create-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "create account fail (duplicate)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create account failure code\", function () {\r",
							"    pm.response.to.have.status(500); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"testuser\",\r\n    \"password\": \"testpass\",\r\n    \"isAdmin\": true,\r\n    \"userGroup\": \"hi\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/create-account",
					"host": [
						"{{url}}"
					],
					"path": [
						"create-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete account failure (invalid request type)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete account failure error code\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Delete account failure return values\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\", \"Invalid request data\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"testuser\",\r\n  \"isAdmin\": \"no\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/delete-account",
					"host": [
						"{{url}}"
					],
					"path": [
						"delete-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete account success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete account success code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Delete account success return values\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"User deleted successfully\");\r",
							"    pm.expect(jsonData).to.have.property(\"user\");\r",
							"    pm.expect(jsonData.user).to.be.an(\"object\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"testuser\",\r\n  \"usernameToDelete\": \"testuser\",\r\n  \"isAdmin\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/delete-account",
					"host": [
						"{{url}}"
					],
					"path": [
						"delete-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "authenticate failure (malformed request)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Authenticate malformed request error code\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Authenticate - malformed request\", function () {\r",
							"    let response = pm.response.text(); \r",
							"    pm.expect(response).to.be.a(\"string\"); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"User\": {\r\n    \"name\": \"validUser\",\r\n    \"isAdmin\": true\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/authenticate",
					"host": [
						"{{url}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "authenticate failure (invalid  username)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Authenticate invalid username error code\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Authenticate - invalid username\", function () {\r",
							"    let response = pm.response.text();\r",
							"    pm.expect(response).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"User\": {\r\n    \"name\": \"nonExistentUser\",\r\n    \"isAdmin\": false\r\n  },\r\n  \"Secret\": {\r\n    \"password\": \"anyPassword123\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/authenticate",
					"host": [
						"{{url}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "authenticate failure (invalid password)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Authenticate invalid password error code\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Authenticate - invalid password\", function () {\r",
							"    let response = pm.response.text();\r",
							"    pm.expect(response).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"User\": {\r\n    \"name\": \"ece30861defaultadminuser\",\r\n    \"isAdmin\": true\r\n  },\r\n  \"Secret\": {\r\n    \"password\": \"fakepassword\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/authenticate",
					"host": [
						"{{url}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "authenticate success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Authenticate success return value\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Authenticate success\", function () {\r",
							"    let response = pm.response.text(); \r",
							"    pm.expect(response).to.be.a(\"string\"); \r",
							"    pm.environment.set(\"authToken\", response);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"User\": {\r\n    \"name\": \"ece30861defaultadminuser\",\r\n    \"isAdmin\": true\r\n  },\r\n  \"Secret\": {\r\n    \"password\": \"correcthorsebatterystaple123(!__+@**(A'\\\"`;DROP TABLE packages;\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/authenticate",
					"host": [
						"{{url}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "reset success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"reset success code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/reset",
					"host": [
						"{{url}}"
					],
					"path": [
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "reset fail 403 invalid authToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Reset failure error code\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-Authentication",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/reset",
					"host": [
						"{{url}}"
					],
					"path": [
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "post package (github URL) success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Upload package success code & content\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.metadata).to.have.property(\"Name\");\r",
							"    pm.expect(response.metadata).to.have.property(\"Version\");\r",
							"    pm.expect(response.metadata).to.have.property(\"ID\");\r",
							"    pm.environment.set(\"underscore_id\", response.metadata.ID);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let authToken = pm.environment.get(\"authToken\");\r",
							"console.log(\"AuthToken:\", authToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"JSProgram\": \"if (process.argv.length === 7) {\\nconsole.log('Success')\\nprocess.exit(0)\\n} else {\\nconsole.log('Failed')\\nprocess.exit(1)\\n}\\n\",\r\n  \"URL\": \"https://github.com/jashkenas/underscore\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package",
					"host": [
						"{{url}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "post package (npm URL) success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Upload package success code & content\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.metadata).to.have.property(\"Name\");\r",
							"    pm.expect(response.metadata).to.have.property(\"Version\");\r",
							"    pm.expect(response.metadata).to.have.property(\"ID\");\r",
							"    pm.environment.set(\"npm_id\", response.metadata.ID);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let authToken = pm.environment.get(\"authToken\");\r",
							"console.log(\"AuthToken:\", authToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"JSProgram\": \"if (process.argv.length === 7) {\\nconsole.log('Success')\\nprocess.exit(0)\\n} else {\\nconsole.log('Failed')\\nprocess.exit(1)\\n}\\n\",\r\n  \"URL\": \"https://www.npmjs.com/package/smallest\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package",
					"host": [
						"{{url}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "post package (content) success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Upload package success code & content\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.metadata).to.have.property(\"Name\");\r",
							"    pm.expect(response.metadata).to.have.property(\"Version\");\r",
							"    pm.expect(response.metadata).to.have.property(\"ID\");\r",
							"    pm.environment.set(\"pretty_ms_id\", response.metadata.ID);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let authToken = pm.environment.get(\"authToken\");\r",
							"console.log(\"AuthToken:\", authToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"Content\": \"\",\r\n  \"JSProgram\": \"if (process.argv.length === 7) {\\nconsole.log('Success')\\nprocess.exit(0)\\n} else {\\nconsole.log('Failed')\\nprocess.exit(1)\\n}\\n\",\r\n  \"debloat\": false,\r\n  \"Name\": \"pretty-ms\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package",
					"host": [
						"{{url}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "post package (URL) failure (package  exists)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Upload existing package code & content\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.metadata).to.have.property(\"Name\");\r",
							"    pm.expect(response.metadata).to.have.property(\"Token\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"JSProgram\": \"if (process.argv.length === 7) {\\nconsole.log('Success')\\nprocess.exit(0)\\n} else {\\nconsole.log('Failed')\\nprocess.exit(1)\\n}\\n\",\r\n  \"URL\": \"https://github.com/jashkenas/underscore\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package",
					"host": [
						"{{url}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "post package (URL) failure (missing auth  header)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Upload package w/o perms code & content\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"    pm.expect(pm.response.text()).to.include(\"Missing Authentication Header\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"JSProgram\": \"if (process.argv.length === 7) {\\nconsole.log('Success')\\nprocess.exit(0)\\n} else {\\nconsole.log('Failed')\\nprocess.exit(1)\\n}\\n\",\r\n  \"URL\": \"https://github.com/jashkenas/underscore\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package",
					"host": [
						"{{url}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "post package (URL) failure (content and url)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Upload package w/ content and url code & content\", function () {\r",
							"pm.response.to.have.status(400);\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.error).to.include(\"Either 'Content' or 'URL' must be set, but not both.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"JSProgram\": \"if (process.argv.length === 7) {\\nconsole.log('Success')\\nprocess.exit(0)\\n} else {\\nconsole.log('Failed')\\nprocess.exit(1)\\n}\\n\",\r\n  \"URL\": \"https://github.com/jashkenas/underscore\",\r\n  \"debloat\": false,\r\n  \"Name\": \"underscore\",\r\n  \"Content\": \"too long to paste\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package",
					"host": [
						"{{url}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "update package (URL) failure (no perms)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update package w/o perms code & content\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"    pm.expect(pm.response.text()).to.include(\"Authentication failed due to invalid or missing AuthenticationToken\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"metadata\": {\r\n    \"Name\": \"underscore\",\r\n    \"Version\": \"1.9.0\",\r\n    \"ID\": \"{{underscore_id}}\"\r\n  },\r\n  \"data\": {\r\n    \"Name\": \"underscore\",\r\n    \"Content\": \"\",\r\n    \"URL\": \"https://github.com/jashkenas/underscore\",\r\n    \"debloat\": true,\r\n    \"JSProgram\": \"sdfsfds\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package/{{underscore_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"{{underscore_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update package (content) fail (copy)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update package (fail) duplicate\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"metadata\": {\r\n    \"Name\": \"pretty-ms\",\r\n    \"Version\": \"9.2.0\",\r\n    \"ID\": \"{{pretty_ms_id}}\"\r\n  },\r\n  \"data\": {\r\n    \"Name\": \"pretty-ms\",\r\n    \"Content\": \"\",\r\n    \"URL\": \"\",\r\n    \"debloat\": false,\r\n    \"JSProgram\": \"sdfsfds\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package/{{pretty_ms_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"{{pretty_ms_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update package (URL / debloat) success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update package success code and content\", function () {\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"metadata\": {\r\n    \"Name\": \"underscore\",\r\n    \"Version\": \"1.9.0\",\r\n    \"ID\": \"{{underscore_id}}\"\r\n  },\r\n  \"data\": {\r\n    \"Name\": \"underscore\",\r\n    \"Content\": \"\",\r\n    \"URL\": \"https://github.com/jashkenas/underscore\",\r\n    \"debloat\": true,\r\n    \"JSProgram\": \"sdfsfds\"\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package/{{underscore_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"{{underscore_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update package (npm URL / debloat) success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"npm package upload success code\", function () {\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"metadata\": {\r\n    \"Name\": \"smallest\",\r\n    \"Version\": \"1.0.0\",\r\n    \"ID\": \"{{npm_id}}\"\r\n  },\r\n  \"data\": {\r\n    \"Name\": \"smallest\",\r\n    \"Content\": \"\",\r\n    \"URL\": \"https://www.npmjs.com/package/smallest\",\r\n    \"debloat\": true,\r\n    \"JSProgram\": \"sdfsfds\"\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package/{{npm_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"{{npm_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "cost success  (url)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"cost execute successful\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/package/{{underscore_id}}/cost",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"{{underscore_id}}",
						"cost"
					]
				}
			},
			"response": []
		},
		{
			"name": "cost failure (perms)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"cost failure (perms)\", function () {\r",
							"pm.response.to.have.status(403);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/package/{{underscore_id}}/cost",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"{{underscore_id}}",
						"cost"
					]
				}
			},
			"response": []
		},
		{
			"name": "cost failure (package does not exist)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"cost execute fail (does not exist)\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/package/21/cost",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"21",
						"cost"
					]
				}
			},
			"response": []
		},
		{
			"name": "download  success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"download success code\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"download success output types\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // Validate \"metadata\" object\r",
							"    pm.expect(jsonData).to.have.property(\"metadata\");\r",
							"    pm.expect(jsonData.metadata).to.have.property(\"Name\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData.metadata).to.have.property(\"Version\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData.metadata).to.have.property(\"ID\").that.is.a(\"string\");\r",
							"\r",
							"    // Validate \"data\" object\r",
							"    pm.expect(jsonData).to.have.property(\"data\");\r",
							"    pm.expect(jsonData.data).to.have.property(\"Content\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData.data).to.have.property(\"JSProgram\").that.is.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/package/{{pretty_ms_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"{{pretty_ms_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "download fail (perms)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"download success code\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/package/{{pretty_ms_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"{{pretty_ms_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "download  failure (not found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"download success code\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/package/21",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"21"
					]
				}
			},
			"response": []
		},
		{
			"name": "rate success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const expectedSchema = {\r",
							"    BusFactor: 'number',\r",
							"    BusFactorLatency: 'number',\r",
							"    Correctness: 'number',\r",
							"    CorrectnessLatency: 'number',\r",
							"    RampUp: 'number',\r",
							"    RampUpLatency: 'number',\r",
							"    ResponsiveMaintainer: 'number',\r",
							"    ResponsiveMaintainerLatency: 'number',\r",
							"    LicenseScore: 'number',\r",
							"    LicenseScoreLatency: 'number',\r",
							"    GoodPinningPractice: 'number',\r",
							"    GoodPinningPracticeLatency: 'number',\r",
							"    PullRequest: 'number',\r",
							"    PullRequestLatency: 'number',\r",
							"    NetScore: 'number',\r",
							"    NetScoreLatency: 'number',\r",
							"};\r",
							"\r",
							"// Parse the response\r",
							"pm.test('rate response format is valid', function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check that all expected fields exist and are of the correct type\r",
							"    for (const key in expectedSchema) {\r",
							"        pm.expect(response).to.have.property(key);\r",
							"        pm.expect(typeof response[key]).to.eql(expectedSchema[key]);\r",
							"    }\r",
							"});\r",
							"\r",
							"// Additional test to check the status code\r",
							"pm.test('Rate success code', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/package/{{pretty_ms_id}}/rate",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"{{pretty_ms_id}}",
						"rate"
					]
				}
			},
			"response": []
		},
		{
			"name": "rate failure (not found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Rate success code', function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/package/21/rate",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"21",
						"rate"
					]
				}
			},
			"response": []
		},
		{
			"name": "rate failure (missing fields)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Rate missing fields code', function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/package//rate",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"",
						"rate"
					]
				}
			},
			"response": []
		},
		{
			"name": "rate failure (perms)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test('Rate perms code', function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{url}}/package/{{pretty_ms_id}}/rate",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"{{pretty_ms_id}}",
						"rate"
					]
				}
			},
			"response": []
		},
		{
			"name": "regex success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const expectedItemSchema = {\r",
							"    Version: 'string',\r",
							"    Name: 'string',\r",
							"    ID: 'string',\r",
							"};\r",
							"\r",
							"\r",
							"pm.test('Regex response type valid', function () {\r",
							"    // Parse the response\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.be.an('array');\r",
							"\r",
							"    response.forEach((item, index) => {\r",
							"        pm.test(`Item ${index + 1} has correct structure`, function () {\r",
							"            // Ensure the item is an object\r",
							"            pm.expect(item).to.be.an('object');\r",
							"\r",
							"            // Check each field in the schema\r",
							"            for (const key in expectedItemSchema) {\r",
							"                pm.expect(item).to.have.property(key);\r",
							"                pm.expect(typeof item[key]).to.eql(expectedItemSchema[key]);\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"\r",
							"});\r",
							"\r",
							"// Additional test to check the status code\r",
							"pm.test('Regex success code', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"RegEx\": \".*?underscore.*\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package/byRegEx",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"byRegEx"
					]
				}
			},
			"response": []
		},
		{
			"name": "regex failure (perms)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Regex fail perm code', function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"RegEx\": \".*?underscore.*\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package/byRegEx",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"byRegEx"
					]
				}
			},
			"response": []
		},
		{
			"name": "regex fail (not found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Regex fail (not found) code', function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"RegEx\": \"xIxxx\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/package/byRegEx",
					"host": [
						"{{url}}"
					],
					"path": [
						"package",
						"byRegEx"
					]
				}
			},
			"response": []
		},
		{
			"name": "pagination success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Pagination success code', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization2",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"Version\": \"*\",\r\n    \"Name\": \"underscore\"\r\n  }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/packages?offset=0",
					"host": [
						"{{url}}"
					],
					"path": [
						"packages"
					],
					"query": [
						{
							"key": "offset",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "clean up reset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"reset success code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/reset",
					"host": [
						"{{url}}"
					],
					"path": [
						"reset"
					]
				}
			},
			"response": []
		}
	]
}